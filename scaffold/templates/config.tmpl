package config

import (
    "encoding/json"
    "os"
    "path/filepath"
)

// Config 应用程序配置结构
type Config struct {
    // 服务器配置
    Server struct {
        Host string `json:"host"` // 服务器主机地址
        Port string `json:"port"` // 服务器监听端口
    } `json:"server"`

    // 数据库配置
    Database struct {
        Driver   string `json:"driver"`   // 数据库驱动类型
        Host     string `json:"host"`     // 数据库主机地址
        Port     string `json:"port"`     // 数据库端口
        User     string `json:"user"`     // 数据库用户名
        Password string `json:"password"` // 数据库密码
        Name     string `json:"name"`     // 数据库名称
    } `json:"database"`

    // 应用配置
    App struct {
        Name        string `json:"name"`        // 应用名称
        Environment string `json:"environment"` // 运行环境 (development, production, testing)
        LogLevel    string `json:"logLevel"`    // 日志级别
        SecretKey   string `json:"secretKey"`   // 应用密钥
        AllowOrigin string `json:"allowOrigin"` // CORS允许的域
    } `json:"app"`
}

// 默认配置
var defaultConfig = Config{
    Server: struct {
        Host string `json:"host"`
        Port string `json:"port"`
    }{
        Host: "localhost",
        Port: "8080",
    },
    Database: struct {
        Driver   string `json:"driver"`
        Host     string `json:"host"`
        Port     string `json:"port"`
        User     string `json:"user"`
        Password string `json:"password"`
        Name     string `json:"name"`
    }{
        Driver:   "mysql",
        Host:     "localhost",
        Port:     "3306",
        User:     "root",
        Password: "",
        Name:     "{{ .ProjectName }}",
    },
    App: struct {
        Name        string `json:"name"`
        Environment string `json:"environment"`
        LogLevel    string `json:"logLevel"`
        SecretKey   string `json:"secretKey"`
        AllowOrigin string `json:"allowOrigin"`
    }{
        Name:        "{{ .ProjectName }}",
        Environment: "development",
        LogLevel:    "debug",
        SecretKey:   "change-this-to-your-secret",
        AllowOrigin: "*",
    },
}

// NewConfig 返回应用程序配置
// 如果配置文件存在，则从文件加载配置
// 否则返回默认配置
func NewConfig() *Config {
    config := defaultConfig

    // 尝试从文件加载配置
    configFile := "config.json"
    if _, err := os.Stat(configFile); err == nil {
        file, err := os.Open(configFile)
        if err == nil {
            defer file.Close()
            decoder := json.NewDecoder(file)
            if err := decoder.Decode(&config); err != nil {
                // 解码失败，使用默认配置
                println("Warning: Failed to decode config file, using default config")
            }
        }
    } else {
        // 配置文件不存在，创建默认配置文件
        if err := saveConfig(&config, configFile); err != nil {
            println("Warning: Failed to create default config file")
        }
    }

    return &config
}

// SaveConfig 将配置保存到文件
func saveConfig(config *Config, path string) error {
    // 确保目录存在
    dir := filepath.Dir(path)
    if err := os.MkdirAll(dir, 0755); err != nil {
        return err
    }

    // 将配置编码为JSON
    data, err := json.MarshalIndent(config, "", "  ")
    if err != nil {
        return err
    }

    // 写入文件
    return os.WriteFile(path, data, 0644)
}