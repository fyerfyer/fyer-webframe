package main

import (
    "context"
    "fmt"
    "log"
    "net/http"
    "os"
    "os/signal"
    "syscall"
    "time"

    "{{ .ModulePath }}/controllers"
    "{{ .ModulePath }}/config"

    web "github.com/fyerfyer/fyer-webframe"
)

func main() {
    // 初始化配置
    cfg := config.NewConfig()

    // 创建 HTTP 服务器
    server := web.NewHTTPServer(
        web.WithTemplate(
            web.NewGoTemplate(web.WithPattern("./views/*.html")),
        ),
    )

    // 日志中间件
    server.Middleware().Global().Add(func(next web.HandlerFunc) web.HandlerFunc {
        return func(ctx *web.Context) {
            start := time.Now()
            next(ctx)
            duration := time.Since(start)
            fmt.Printf("[%s] %s - %d - %v\n", 
                ctx.Req.Method, ctx.Req.URL.Path, ctx.RespStatusCode, duration)
        }
    })

    // 错误恢复中间件
    server.Middleware().Global().Add(func(next web.HandlerFunc) web.HandlerFunc {
        return func(ctx *web.Context) {
            defer func() {
                if err := recover(); err != nil {
                    log.Printf("Panic recovered: %v", err)
                    ctx.InternalServerError("服务器内部错误")
                }
            }()
            next(ctx)
        }
    })

    // 注册控制器
    homeController := controllers.NewHomeController()
    
    // 注册路由
    server.Get("/", homeController.Index)
    server.Get("/about", homeController.About)

    // 静态文件服务
    fs := http.Dir("./public")
    server.Get("/public/*file", func(ctx *web.Context) {
        filePath := ctx.PathParam("file").Value
        ctx.FileFromFS(filePath, fs)
    })

    // 启动服务器
    go func() {
        addr := fmt.Sprintf("%s:%s", cfg.Server.Host, cfg.Server.Port)
        fmt.Printf("服务器启动在 http://%s\n", addr)
        if err := server.Start(addr); err != nil && err != http.ErrServerClosed {
            log.Fatalf("服务器启动失败: %v", err)
        }
    }()

    // 等待中断信号以优雅地关闭服务器
    quit := make(chan os.Signal, 1)
    signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
    <-quit

    fmt.Println("正在关闭服务器...")

    // 创建一个5秒超时的上下文
    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
    defer cancel()

    // 尝试优雅关闭服务器
    if err := server.Shutdown(ctx); err != nil {
        log.Fatalf("服务器关闭失败: %v", err)
    }

    fmt.Println("服务器已成功关闭")
}