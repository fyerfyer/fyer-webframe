// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	web "github.com/fyerfyer/fyer-webframe/web"
	mock "github.com/stretchr/testify/mock"
)

// Template is an autogenerated mock type for the Template type
type Template struct {
	mock.Mock
}

type Template_Expecter struct {
	mock *mock.Mock
}

func (_m *Template) EXPECT() *Template_Expecter {
	return &Template_Expecter{mock: &_m.Mock}
}

// LoadFromFiles provides a mock function with given fields: files
func (_m *Template) LoadFromFiles(files ...string) error {
	_va := make([]interface{}, len(files))
	for _i := range files {
		_va[_i] = files[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LoadFromFiles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(files...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Template_LoadFromFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadFromFiles'
type Template_LoadFromFiles_Call struct {
	*mock.Call
}

// LoadFromFiles is a helper method to define mock.On call
//   - files ...string
func (_e *Template_Expecter) LoadFromFiles(files ...interface{}) *Template_LoadFromFiles_Call {
	return &Template_LoadFromFiles_Call{Call: _e.mock.On("LoadFromFiles",
		append([]interface{}{}, files...)...)}
}

func (_c *Template_LoadFromFiles_Call) Run(run func(files ...string)) *Template_LoadFromFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Template_LoadFromFiles_Call) Return(_a0 error) *Template_LoadFromFiles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Template_LoadFromFiles_Call) RunAndReturn(run func(...string) error) *Template_LoadFromFiles_Call {
	_c.Call.Return(run)
	return _c
}

// LoadFromGlob provides a mock function with given fields: pattern
func (_m *Template) LoadFromGlob(pattern string) error {
	ret := _m.Called(pattern)

	if len(ret) == 0 {
		panic("no return value specified for LoadFromGlob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(pattern)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Template_LoadFromGlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadFromGlob'
type Template_LoadFromGlob_Call struct {
	*mock.Call
}

// LoadFromGlob is a helper method to define mock.On call
//   - pattern string
func (_e *Template_Expecter) LoadFromGlob(pattern interface{}) *Template_LoadFromGlob_Call {
	return &Template_LoadFromGlob_Call{Call: _e.mock.On("LoadFromGlob", pattern)}
}

func (_c *Template_LoadFromGlob_Call) Run(run func(pattern string)) *Template_LoadFromGlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Template_LoadFromGlob_Call) Return(_a0 error) *Template_LoadFromGlob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Template_LoadFromGlob_Call) RunAndReturn(run func(string) error) *Template_LoadFromGlob_Call {
	_c.Call.Return(run)
	return _c
}

// Reload provides a mock function with no fields
func (_m *Template) Reload() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Template_Reload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reload'
type Template_Reload_Call struct {
	*mock.Call
}

// Reload is a helper method to define mock.On call
func (_e *Template_Expecter) Reload() *Template_Reload_Call {
	return &Template_Reload_Call{Call: _e.mock.On("Reload")}
}

func (_c *Template_Reload_Call) Run(run func()) *Template_Reload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Template_Reload_Call) Return(_a0 error) *Template_Reload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Template_Reload_Call) RunAndReturn(run func() error) *Template_Reload_Call {
	_c.Call.Return(run)
	return _c
}

// Render provides a mock function with given fields: ctx, tplName, data
func (_m *Template) Render(ctx *web.Context, tplName string, data interface{}) ([]byte, error) {
	ret := _m.Called(ctx, tplName, data)

	if len(ret) == 0 {
		panic("no return value specified for Render")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*web.Context, string, interface{}) ([]byte, error)); ok {
		return rf(ctx, tplName, data)
	}
	if rf, ok := ret.Get(0).(func(*web.Context, string, interface{}) []byte); ok {
		r0 = rf(ctx, tplName, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*web.Context, string, interface{}) error); ok {
		r1 = rf(ctx, tplName, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Template_Render_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Render'
type Template_Render_Call struct {
	*mock.Call
}

// Render is a helper method to define mock.On call
//   - ctx *web.Context
//   - tplName string
//   - data interface{}
func (_e *Template_Expecter) Render(ctx interface{}, tplName interface{}, data interface{}) *Template_Render_Call {
	return &Template_Render_Call{Call: _e.mock.On("Render", ctx, tplName, data)}
}

func (_c *Template_Render_Call) Run(run func(ctx *web.Context, tplName string, data interface{})) *Template_Render_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*web.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *Template_Render_Call) Return(_a0 []byte, _a1 error) *Template_Render_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Template_Render_Call) RunAndReturn(run func(*web.Context, string, interface{}) ([]byte, error)) *Template_Render_Call {
	_c.Call.Return(run)
	return _c
}

// NewTemplate creates a new instance of Template. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTemplate(t interface {
	mock.TestingT
	Cleanup(func())
}) *Template {
	mock := &Template{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
