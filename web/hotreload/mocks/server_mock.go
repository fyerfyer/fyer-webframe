// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	web "github.com/fyerfyer/fyer-webframe/web"
)

// Server is an autogenerated mock type for the Server type
type Server struct {
	mock.Mock
}

type Server_Expecter struct {
	mock *mock.Mock
}

func (_m *Server) EXPECT() *Server_Expecter {
	return &Server_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: path, handler
func (_m *Server) Delete(path string, handler web.HandlerFunc) web.RouteRegister {
	ret := _m.Called(path, handler)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 web.RouteRegister
	if rf, ok := ret.Get(0).(func(string, web.HandlerFunc) web.RouteRegister); ok {
		r0 = rf(path, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(web.RouteRegister)
		}
	}

	return r0
}

// Server_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Server_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - path string
//   - handler web.HandlerFunc
func (_e *Server_Expecter) Delete(path interface{}, handler interface{}) *Server_Delete_Call {
	return &Server_Delete_Call{Call: _e.mock.On("Delete", path, handler)}
}

func (_c *Server_Delete_Call) Run(run func(path string, handler web.HandlerFunc)) *Server_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(web.HandlerFunc))
	})
	return _c
}

func (_c *Server_Delete_Call) Return(_a0 web.RouteRegister) *Server_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Server_Delete_Call) RunAndReturn(run func(string, web.HandlerFunc) web.RouteRegister) *Server_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: path, handler
func (_m *Server) Get(path string, handler web.HandlerFunc) web.RouteRegister {
	ret := _m.Called(path, handler)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 web.RouteRegister
	if rf, ok := ret.Get(0).(func(string, web.HandlerFunc) web.RouteRegister); ok {
		r0 = rf(path, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(web.RouteRegister)
		}
	}

	return r0
}

// Server_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Server_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - path string
//   - handler web.HandlerFunc
func (_e *Server_Expecter) Get(path interface{}, handler interface{}) *Server_Get_Call {
	return &Server_Get_Call{Call: _e.mock.On("Get", path, handler)}
}

func (_c *Server_Get_Call) Run(run func(path string, handler web.HandlerFunc)) *Server_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(web.HandlerFunc))
	})
	return _c
}

func (_c *Server_Get_Call) Return(_a0 web.RouteRegister) *Server_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Server_Get_Call) RunAndReturn(run func(string, web.HandlerFunc) web.RouteRegister) *Server_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplateEngine provides a mock function with no fields
func (_m *Server) GetTemplateEngine() web.Template {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTemplateEngine")
	}

	var r0 web.Template
	if rf, ok := ret.Get(0).(func() web.Template); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(web.Template)
		}
	}

	return r0
}

// Server_GetTemplateEngine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplateEngine'
type Server_GetTemplateEngine_Call struct {
	*mock.Call
}

// GetTemplateEngine is a helper method to define mock.On call
func (_e *Server_Expecter) GetTemplateEngine() *Server_GetTemplateEngine_Call {
	return &Server_GetTemplateEngine_Call{Call: _e.mock.On("GetTemplateEngine")}
}

func (_c *Server_GetTemplateEngine_Call) Run(run func()) *Server_GetTemplateEngine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Server_GetTemplateEngine_Call) Return(_a0 web.Template) *Server_GetTemplateEngine_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Server_GetTemplateEngine_Call) RunAndReturn(run func() web.Template) *Server_GetTemplateEngine_Call {
	_c.Call.Return(run)
	return _c
}

// Group provides a mock function with given fields: prefix
func (_m *Server) Group(prefix string) web.RouteGroup {
	ret := _m.Called(prefix)

	if len(ret) == 0 {
		panic("no return value specified for Group")
	}

	var r0 web.RouteGroup
	if rf, ok := ret.Get(0).(func(string) web.RouteGroup); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(web.RouteGroup)
		}
	}

	return r0
}

// Server_Group_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Group'
type Server_Group_Call struct {
	*mock.Call
}

// Group is a helper method to define mock.On call
//   - prefix string
func (_e *Server_Expecter) Group(prefix interface{}) *Server_Group_Call {
	return &Server_Group_Call{Call: _e.mock.On("Group", prefix)}
}

func (_c *Server_Group_Call) Run(run func(prefix string)) *Server_Group_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Server_Group_Call) Return(_a0 web.RouteGroup) *Server_Group_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Server_Group_Call) RunAndReturn(run func(string) web.RouteGroup) *Server_Group_Call {
	_c.Call.Return(run)
	return _c
}

// Middleware provides a mock function with no fields
func (_m *Server) Middleware() web.MiddlewareManager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Middleware")
	}

	var r0 web.MiddlewareManager
	if rf, ok := ret.Get(0).(func() web.MiddlewareManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(web.MiddlewareManager)
		}
	}

	return r0
}

// Server_Middleware_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Middleware'
type Server_Middleware_Call struct {
	*mock.Call
}

// Middleware is a helper method to define mock.On call
func (_e *Server_Expecter) Middleware() *Server_Middleware_Call {
	return &Server_Middleware_Call{Call: _e.mock.On("Middleware")}
}

func (_c *Server_Middleware_Call) Run(run func()) *Server_Middleware_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Server_Middleware_Call) Return(_a0 web.MiddlewareManager) *Server_Middleware_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Server_Middleware_Call) RunAndReturn(run func() web.MiddlewareManager) *Server_Middleware_Call {
	_c.Call.Return(run)
	return _c
}

// Options provides a mock function with given fields: path, handler
func (_m *Server) Options(path string, handler web.HandlerFunc) web.RouteRegister {
	ret := _m.Called(path, handler)

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 web.RouteRegister
	if rf, ok := ret.Get(0).(func(string, web.HandlerFunc) web.RouteRegister); ok {
		r0 = rf(path, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(web.RouteRegister)
		}
	}

	return r0
}

// Server_Options_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Options'
type Server_Options_Call struct {
	*mock.Call
}

// Options is a helper method to define mock.On call
//   - path string
//   - handler web.HandlerFunc
func (_e *Server_Expecter) Options(path interface{}, handler interface{}) *Server_Options_Call {
	return &Server_Options_Call{Call: _e.mock.On("Options", path, handler)}
}

func (_c *Server_Options_Call) Run(run func(path string, handler web.HandlerFunc)) *Server_Options_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(web.HandlerFunc))
	})
	return _c
}

func (_c *Server_Options_Call) Return(_a0 web.RouteRegister) *Server_Options_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Server_Options_Call) RunAndReturn(run func(string, web.HandlerFunc) web.RouteRegister) *Server_Options_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: path, handler
func (_m *Server) Patch(path string, handler web.HandlerFunc) web.RouteRegister {
	ret := _m.Called(path, handler)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 web.RouteRegister
	if rf, ok := ret.Get(0).(func(string, web.HandlerFunc) web.RouteRegister); ok {
		r0 = rf(path, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(web.RouteRegister)
		}
	}

	return r0
}

// Server_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type Server_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - path string
//   - handler web.HandlerFunc
func (_e *Server_Expecter) Patch(path interface{}, handler interface{}) *Server_Patch_Call {
	return &Server_Patch_Call{Call: _e.mock.On("Patch", path, handler)}
}

func (_c *Server_Patch_Call) Run(run func(path string, handler web.HandlerFunc)) *Server_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(web.HandlerFunc))
	})
	return _c
}

func (_c *Server_Patch_Call) Return(_a0 web.RouteRegister) *Server_Patch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Server_Patch_Call) RunAndReturn(run func(string, web.HandlerFunc) web.RouteRegister) *Server_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Post provides a mock function with given fields: path, handler
func (_m *Server) Post(path string, handler web.HandlerFunc) web.RouteRegister {
	ret := _m.Called(path, handler)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 web.RouteRegister
	if rf, ok := ret.Get(0).(func(string, web.HandlerFunc) web.RouteRegister); ok {
		r0 = rf(path, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(web.RouteRegister)
		}
	}

	return r0
}

// Server_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type Server_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//   - path string
//   - handler web.HandlerFunc
func (_e *Server_Expecter) Post(path interface{}, handler interface{}) *Server_Post_Call {
	return &Server_Post_Call{Call: _e.mock.On("Post", path, handler)}
}

func (_c *Server_Post_Call) Run(run func(path string, handler web.HandlerFunc)) *Server_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(web.HandlerFunc))
	})
	return _c
}

func (_c *Server_Post_Call) Return(_a0 web.RouteRegister) *Server_Post_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Server_Post_Call) RunAndReturn(run func(string, web.HandlerFunc) web.RouteRegister) *Server_Post_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: path, handler
func (_m *Server) Put(path string, handler web.HandlerFunc) web.RouteRegister {
	ret := _m.Called(path, handler)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 web.RouteRegister
	if rf, ok := ret.Get(0).(func(string, web.HandlerFunc) web.RouteRegister); ok {
		r0 = rf(path, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(web.RouteRegister)
		}
	}

	return r0
}

// Server_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type Server_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - path string
//   - handler web.HandlerFunc
func (_e *Server_Expecter) Put(path interface{}, handler interface{}) *Server_Put_Call {
	return &Server_Put_Call{Call: _e.mock.On("Put", path, handler)}
}

func (_c *Server_Put_Call) Run(run func(path string, handler web.HandlerFunc)) *Server_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(web.HandlerFunc))
	})
	return _c
}

func (_c *Server_Put_Call) Return(_a0 web.RouteRegister) *Server_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Server_Put_Call) RunAndReturn(run func(string, web.HandlerFunc) web.RouteRegister) *Server_Put_Call {
	_c.Call.Return(run)
	return _c
}

// ServeHTTP provides a mock function with given fields: _a0, _a1
func (_m *Server) ServeHTTP(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// Server_ServeHTTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeHTTP'
type Server_ServeHTTP_Call struct {
	*mock.Call
}

// ServeHTTP is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
func (_e *Server_Expecter) ServeHTTP(_a0 interface{}, _a1 interface{}) *Server_ServeHTTP_Call {
	return &Server_ServeHTTP_Call{Call: _e.mock.On("ServeHTTP", _a0, _a1)}
}

func (_c *Server_ServeHTTP_Call) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request)) *Server_ServeHTTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *Server_ServeHTTP_Call) Return() *Server_ServeHTTP_Call {
	_c.Call.Return()
	return _c
}

func (_c *Server_ServeHTTP_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *Server_ServeHTTP_Call {
	_c.Run(run)
	return _c
}

// Shutdown provides a mock function with given fields: ctx
func (_m *Server) Shutdown(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Server_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type Server_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Server_Expecter) Shutdown(ctx interface{}) *Server_Shutdown_Call {
	return &Server_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *Server_Shutdown_Call) Run(run func(ctx context.Context)) *Server_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Server_Shutdown_Call) Return(_a0 error) *Server_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Server_Shutdown_Call) RunAndReturn(run func(context.Context) error) *Server_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: addr
func (_m *Server) Start(addr string) error {
	ret := _m.Called(addr)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Server_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Server_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - addr string
func (_e *Server_Expecter) Start(addr interface{}) *Server_Start_Call {
	return &Server_Start_Call{Call: _e.mock.On("Start", addr)}
}

func (_c *Server_Start_Call) Run(run func(addr string)) *Server_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Server_Start_Call) Return(_a0 error) *Server_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Server_Start_Call) RunAndReturn(run func(string) error) *Server_Start_Call {
	_c.Call.Return(run)
	return _c
}

// UseTemplate provides a mock function with given fields: tpl
func (_m *Server) UseTemplate(tpl web.Template) web.Server {
	ret := _m.Called(tpl)

	if len(ret) == 0 {
		panic("no return value specified for UseTemplate")
	}

	var r0 web.Server
	if rf, ok := ret.Get(0).(func(web.Template) web.Server); ok {
		r0 = rf(tpl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(web.Server)
		}
	}

	return r0
}

// Server_UseTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UseTemplate'
type Server_UseTemplate_Call struct {
	*mock.Call
}

// UseTemplate is a helper method to define mock.On call
//   - tpl web.Template
func (_e *Server_Expecter) UseTemplate(tpl interface{}) *Server_UseTemplate_Call {
	return &Server_UseTemplate_Call{Call: _e.mock.On("UseTemplate", tpl)}
}

func (_c *Server_UseTemplate_Call) Run(run func(tpl web.Template)) *Server_UseTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(web.Template))
	})
	return _c
}

func (_c *Server_UseTemplate_Call) Return(_a0 web.Server) *Server_UseTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Server_UseTemplate_Call) RunAndReturn(run func(web.Template) web.Server) *Server_UseTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// NewServer creates a new instance of Server. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Server {
	mock := &Server{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
