package predicate_gen

const predicateTemplate = `// Code generated by orm predicate generator. DO NOT EDIT.
package {{.Pkg}}

import (
    "github.com/fyerfyer/fyer-webframe/orm"
    {{- range $pkg, $info := .Imports}}
    {{- if $info.Alias}}
    {{$info.Alias}} "{{$info.Path}}"
    {{- else}}
    "{{$info.Path}}"
    {{- end}}
    {{- end}}
)

// initDB 初始化数据库连接
// 使用示例:
// mockDB, mock, err := sqlmock.New()
// if err != nil {
//     panic(err)
// }
// defer mockDB.Close()
// db, err := orm.Open(mockDB, "mysql")
// if err != nil {
//     panic(err)
// }

// New{{.Name}}Selector 创建新的查询构建器
var New{{.Name}}Selector = func(db *orm.DB) *orm.Selector[{{.Name}}] {
    return orm.RegisterSelector[{{.Name}}](db)
}

// New{{.Name}}Inserter 创建新的插入构建器
var New{{.Name}}Inserter = func(db *orm.DB) *orm.Inserter[{{.Name}}] {
    return orm.RegisterInserter[{{.Name}}](db)
}

// New{{.Name}}Deleter 创建新的删除构建器
var New{{.Name}}Deleter = func(db *orm.DB) *orm.Deleter[{{.Name}}] {
    return orm.RegisterDeleter[{{.Name}}](db)
}

// Field names
const (
    {{- range .Fields}}
    {{$.Name}}{{.Name}} = "{{.Name}}"
    {{- end}}
)

{{range .Fields}}
// {{$.Name}}{{.Name}}EQ creates an equals predicate
func {{$.Name}}{{.Name}}EQ(val {{.Type}}) *orm.Predicate {
    return orm.Col({{$.Name}}{{.Name}}).Eq(val)
}

// {{$.Name}}{{.Name}}NEQ creates a not equals predicate
func {{$.Name}}{{.Name}}NEQ(val {{.Type}}) *orm.Predicate {
    return orm.NOT(orm.Col({{$.Name}}{{.Name}}).Eq(val))
}

// {{$.Name}}{{.Name}}GT creates a greater than predicate
func {{$.Name}}{{.Name}}GT(val {{.Type}}) *orm.Predicate {
    return orm.Col({{$.Name}}{{.Name}}).Gt(val)
}

// {{$.Name}}{{.Name}}GTE creates a greater than or equals predicate
func {{$.Name}}{{.Name}}GTE(val {{.Type}}) *orm.Predicate {
    return orm.Col({{$.Name}}{{.Name}}).Gte(val)
}

// {{$.Name}}{{.Name}}LT creates a less than predicate
func {{$.Name}}{{.Name}}LT(val {{.Type}}) *orm.Predicate {
    return orm.Col({{$.Name}}{{.Name}}).Lt(val)
}

// {{$.Name}}{{.Name}}LTE creates a less than or equals predicate
func {{$.Name}}{{.Name}}LTE(val {{.Type}}) *orm.Predicate {
    return orm.Col({{$.Name}}{{.Name}}).Lte(val)
}

// {{$.Name}}{{.Name}}Like creates a LIKE predicate
func {{$.Name}}{{.Name}}Like(pattern string) *orm.Predicate {
    return orm.Col({{$.Name}}{{.Name}}).Like(pattern)
}

// {{$.Name}}{{.Name}}NotLike creates a NOT LIKE predicate
func {{$.Name}}{{.Name}}NotLike(pattern string) *orm.Predicate {
    return orm.Col({{$.Name}}{{.Name}}).NotLike(pattern)
}

// {{$.Name}}{{.Name}}In creates an IN predicate
func {{$.Name}}{{.Name}}In(vals ...{{.Type}}) *orm.Predicate {
    return orm.Col({{$.Name}}{{.Name}}).In(vals)
}

// {{$.Name}}{{.Name}}NotIn creates a NOT IN predicate
func {{$.Name}}{{.Name}}NotIn(vals ...{{.Type}}) *orm.Predicate {
    return orm.Col({{$.Name}}{{.Name}}).NotIn(vals)
}

// {{$.Name}}{{.Name}}IsNull creates an IS NULL predicate
func {{$.Name}}{{.Name}}IsNull() *orm.Predicate {
    return orm.Col({{$.Name}}{{.Name}}).IsNull()
}

// {{$.Name}}{{.Name}}NotNull creates an IS NOT NULL predicate
func {{$.Name}}{{.Name}}NotNull() *orm.Predicate {
    return orm.Col({{$.Name}}{{.Name}}).NotNull()
}

// {{$.Name}}{{.Name}}Between creates a BETWEEN predicate
func {{$.Name}}{{.Name}}Between(start, end {{.Type}}) *orm.Predicate {
    return orm.Col({{$.Name}}{{.Name}}).Between(start, end)
}

// {{$.Name}}{{.Name}}NotBetween creates a NOT BETWEEN predicate
func {{$.Name}}{{.Name}}NotBetween(start, end {{.Type}}) *orm.Predicate {
    return orm.Col({{$.Name}}{{.Name}}).NotBetween(start, end)
}

// {{$.Name}}{{.Name}}OrderBy creates an ORDER BY column
func {{$.Name}}{{.Name}}OrderBy(desc bool) orm.OrderBy {
    if desc {
        return orm.Desc(orm.Col({{$.Name}}{{.Name}}))
    }
    return orm.Asc(orm.Col({{$.Name}}{{.Name}}))
}
{{end}}
`
